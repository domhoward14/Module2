TDL for findFunction
#######################

CodeArray --> double array for all the parsed strings

algorithm

	I. read the first letter if it is a letter
			a.) Check if it matches one of the first letters of a reserved word send it to that switch.
				1.)check all potential matches
					2a.) if it matches one of the strings then make a string token.
			b.) If it did not match any of the first letters then it is a identifier and we can make the 
				token for it now.
	
	II.)If it is not a letter check the first index to see if it is a number.(Just check the range of the ascii value)
		a.) If it is a number then make a number token.
		b.) If it is not a number then send it to the findSymbol()
	
	III.) If  it gets to this point then it must be a symbol and we have to run it through a switch to find which one.
		a.)If it matches one of the symbols then make a symbol token.
		b.)If it goes through the entire switch and does not match anything then it is not valid just iterate to the next one.
################

tokenize()
{
	while(!endOfArray)
		string = fetchString()
		bos = fetchBOS()
		if(isLetter(bos))
			if(runRwSwitch(bos) == true)//<-- if true it also makes the put into the token array
				codeIndex ++
				continue
			else
				putIdentifierToken()
				codeIndex ++
				continue
				
		else
			if (isNumber(bos)) 
				makeNumToken()
				codeIndex ++
				continue
			else
				runSymbolSwitch(bos) //<-- runs a symbol switch to find the symbol. put it in array if found.
				codeIndex ++  		//If not found then move to next.
	end While
	
	
	
###############################################
RESERVERD WORDS
	const, call .....
	var
	proce
	begin
	end, else
	if
	then
	while,write
	do
	read
	odd

######################
remove all index's that have the ascii value of
	1.)10
	2.)32
	3.)47
	4.)9
	5.)11
#######################

Functions TDL(These plus tokenize() needs to be tested )
	1.)wordSwitch()
	2.)isNumber()
	3.)symbolSwitch()
	4.)putIdentifierToken()
	5.)putNumToken()
	6.)putReserveToken()
	7.)putSymbolToken()
	8.)putWordToken()
	
need to modify code to recognize
	1.) not equal
	2.) less then equal
	3.) greater then equal
	4.) become
	
	I.) Do this by making a test for any one of these chars
		a.) < --> check if next is >
		b.) < --> check if next is =
		c.) > --> check if next is =
		d.) : --> check if next is =
	II.) If so then skip the counter plus one as well
		isNextGts()
		isNextEqual()
#############################

void errorCheck()

	I.) loop through the token list and search for any 
	words that have a number then a letter.
	II.)
###############################
TDL
	1.)Debug the error in the two numbers staying behind.
	2.)change the incorrect symbols.